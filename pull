local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Iamrich " .. Fluent.Version,
    SubTitle = "by Imarich",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    Event = Window:AddTab({ Title = "Event", Icon = "Trophy" }),
}



local Toggle = Tabs.Event:AddToggle("Part 1 event", {Title = "Auto click", Default = false})

Toggle:OnChanged(function(enabled)
    local player = game:GetService("Players").LocalPlayer -- Obtener el jugador local
    local AutoTrain = player:FindFirstChild("AutoTrain") -- Buscar AutoTrain

    -- Verificar si AutoTrain existe y es un BoolValue
    if AutoTrain and AutoTrain:IsA("BoolValue") then
        AutoTrain.Value = enabled -- Cambiar su valor dependiendo del Toggle
    end
end)

Tabs.Event:AddButton({
    Title = "Swing fast",
    Description = "Swing 100x fast",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer -- Obtener el jugador local
        local SwingValue = player:FindFirstChild("SwingValue") -- Buscar SwingValue
                
        -- Verificar si SwingValue existe y es un NumberValue
        if SwingValue and SwingValue:IsA("NumberValue") then
            if SwingValue.Value >= 0 and SwingValue.Value <= 110 then
                SwingValue.Value = 1000000
            end
        end
    end
})




local Toggle = Tabs.Event:AddToggle("Part 1 event", {Title = "Click Upgrades", Default = false})

local lastEquippedEggID = nil -- Store the last equipped egg to prevent spam

local function updateEgg(player)
    local powerEggs = player:FindFirstChild("PowerEggs") -- Find PowerEggs

    -- Check if PowerEggs exists and is a NumberValue
    if powerEggs and powerEggs:IsA("NumberValue") then
        local eggID = nil  -- Initialize the egg ID

        -- Ascending check so the best egg is set
        if powerEggs.Value >= 750 then
            eggID = "2"
        end
        if powerEggs.Value >= 2500 then
            eggID = "3"
        end
        if powerEggs.Value >= 10000 then
            eggID = "4"
        end
        if powerEggs.Value >= 25000 then
            eggID = "5"
        end
        if powerEggs.Value >= 100000 then
            eggID = "6"
        end
        if powerEggs.Value >= 250000 then
            eggID = "7"
        end
        if powerEggs.Value >= 500000 then
            eggID = "8"
        end
        if powerEggs.Value >= 1000000 then
            eggID = "9"
        end
        if powerEggs.Value >= 2500000 then
            eggID = "10"
        end
        if powerEggs.Value >= 5000000 then
            eggID = "11"
        end
        if powerEggs.Value >= 10000000 then
            eggID = "12"
        end

        -- Only equip if the eggID has changed
        if eggID and eggID ~= lastEquippedEggID then
            lastEquippedEggID = eggID -- Update last equipped egg
            local args = {
                [1] = game:GetService("ReplicatedStorage")
                    :WaitForChild("Items")
                    :WaitForChild("Eggs")
                    :WaitForChild(eggID),  -- Use the variable eggID
                [2] = true
            }

            game:GetService("ReplicatedStorage")
                :WaitForChild("GameClient")
                :WaitForChild("Events")
                :WaitForChild("RemoteEvent")
                :WaitForChild("ClickChangeEvent")
                :FireServer(unpack(args))
        end
    end
end

local running = false  -- Flag to control the toggle state
local connection  -- Variable to store the connection for later disconnect

Toggle:OnChanged(function(enabled)
    running = enabled  -- Set the running state based on the toggle
    local player = game:GetService("Players").LocalPlayer

    if running then
        -- Initial update when toggle is enabled
        updateEgg(player)

        -- Disconnect any previous connection to avoid stacking
        if connection then
            connection:Disconnect()
            connection = nil
        end

        -- Listen for changes to the PowerEggs value
        connection = player:WaitForChild("PowerEggs").Changed:Connect(function()
            updateEgg(player)  -- Update silently whenever PowerEggs changes
        end)
    else
        -- Disconnect the event when the toggle is turned off
        if connection then
            connection:Disconnect()
            connection = nil
        end
    end
end)


local Toggle = Tabs.Event:AddToggle("STRENGTH", {Title = "Dungeon Normal", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Normal"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnJoinDungeon"):FireServer(unpack(args))
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnDungeonClick"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Event:AddToggle("STRENGTH", {Title = "Dungeon Hard", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Hard"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnJoinDungeon"):FireServer(unpack(args))
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnDungeonClick"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Event:AddToggle("STRENGTH", {Title = "Dungeon Chaos", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Chaos"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnJoinDungeon"):FireServer(unpack(args))
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnDungeonClick"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)
